$ErrorActionPreference = "SilentlyContinue"

if ((Test-Path 'HKCU:\Software\NitrAPI') -eq $false)
{
	New-Item -Path 'HKCU:\Software\NitrAPI'
	Set-ItemProperty -Path 'HKCU:\Software\NitrAPI' -Name 'oAuth' -Value (Read-Host 'Enter the oAuth key')
}





$oAuth = (Get-ItemProperty -Path 'HKCU:\Software\NitrAPI' -Name 'oAuth').oAuth
$ftppassword = "test"





#$oAuth = $null
$game = $null
$ntrid = $null
$ntrhostname = $null
$ntrusername = $null
$ntrwinhostname = $null
$headers = $null
$body = $null
$response = $null
$uri = $null
$password = $null
$dir = $null
$search = $null
$page = $null
$file = $null
$url = $null
$outfile = $null


$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Authorization", "Bearer $oAuth")




##############
#Start of API#
##############

Function NtrGet
{   
	Param (
        $uri,
        $body = @{}
    )

	$response = Invoke-RestMethod $uri -Method Get -Headers $headers -Body $body
	$response.data
}
Function NtrPost
{   
	Param (
        $uri,
        $body = @{}
    )

	$response = Invoke-RestMethod $uri -Method Post -Headers $headers -Body $body
	$response
}
Function NtrUserDetails
{
	(NtrGet "https://api.nitrado.net/user").user
}
Function NtrServiceList
{
	(NtrGet "https://api.nitrado.net/services").services
}

$ntrid = (NtrServiceList).id
$ntrusername = (NtrServiceList).username

Function NtrServiceDetails
{
	(NtrGet "https://api.nitrado.net/services/$ntrid").service
}
Function NtrServiceLogs
{
	Param (
		[Parameter(Mandatory=$false)]$page = 1
	)
	$body = @{page=$page}
	(NtrGet "https://api.nitrado.net/services/$ntrid/logs" $body).logs
}
Function NtrServiceNotifications
{
	Param (
		[Parameter(Mandatory=$false)]$include_dismissed = $false
	)
	$body = @{include_dismissed=$include_dismissed}
	(NtrGet "https://api.nitrado.net/services/$ntrid/notifications" $body).notifications
}
Function NtrGameserverDetails
{
	(NtrGet "https://api.nitrado.net/services/$ntrid/gameservers").gameserver
}
$ntrhostname = (NtrGameserverDetails).hostsystems.linux.hostname
$ntrwinhostname = (NtrGameserverDetails).hostsystems.windows.hostname
Function NtrSetFtpPassword
{
	Param (
		[Parameter(Mandatory=$true)]$password
	)
	$body = @{password=$password}
	(NtrPost "https://api.nitrado.net/services/$ntrid/gameservers/ftp/password" $body)
}
Function NtrFilesList
{
	Param (
		[Parameter(Mandatory=$false)]$dir = $null,
		[Parameter(Mandatory=$false)]$search = $null
	)
	$body = @{dir=$dir;search=$search}
	(NtrGet "https://api.nitrado.net/services/$ntrid/gameservers/file_server/list" $body).entries
}
Function NtrFileDownload
{
	Param (
		[Parameter(Mandatory=$true)]$file
	)
	$body = @{file=$file}
	$outfile = Split-Path $file -leaf
	$url = (NtrGet "https://api.nitrado.net/services/$ntrid/gameservers/file_server/download" $body).token.url
	Write-Host $file
	wget $url -outfile $outfile
}
Function NtrFileCopy
{
	Param (
		$source_path,
		$target_path,
		$target_name
	)
	$body = @{source_path=$source_path;target_path=$target_path;target_name=$target_name}
	(NtrPost "https://api.nitrado.net/services/$ntrid/gameservers/file_server/copy" $body)
}
Function NtrListPlayers
{
	(NtrGet "https://api.nitrado.net/services/$ntrid/gameservers/games/players").players
}
Function NtrListBackups
{
	(NtrGet "https://api.nitrado.net/services/$ntrid/gameservers/backups").backups
}

$game = (NtrGameserverDetails).game
$sg = "/games/$ntrusername/noftp/$game/ShooterGame/Saved"

Function NtrFileSeek
{
	Param (
		$file,
		$offset,
		$length
	)
	#Invoke-RestMethod "https://api.nitrado.net/services/$ntrid/gameservers/file_server/seek" -Header $headers -ErrorVariable Err -body @{file="$sg/Logs/ShooterGame.log";offset=0;length=5}).data.token.url
	(wget ((NtrGet "https://api.nitrado.net/services/$ntrid/gameservers/file_server/seek" @{file=$file;offset=$offset;length=$length}).token.url)).content
}
Function NtrSettingsUpdate
{
	Param (
		$category,
		$key,
		$value
	)
	
	NtrPost "https://api.nitrado.net/services/$ntrid/gameservers/settings" @{category=$category;key=$key;value=$value}
	
}

#############################
#End of API, start of custom#
#############################

Function NtrDirDownload
{   
	Param (
        $path
    )
	
	Write-Host $path
	
	md (Split-Path $path -leaf) | out-null
	cd (Split-Path $path -leaf)
	
	$list = (NtrFilesList $path)
	foreach ($file in $list | where {$_.type -eq "file"}){
		#NtrFileDownload $file.path
		#Nitrado disabled direct downloads of SavedArks folder, the below is a workaround.
		NtrFileCopy $file.path "/games/$ntrusername/ftproot/" | out-null
		$file.path
		$filename = (split-path $file.path -leaf)
		wget ftp://$ntrusername`:test@usny012.nitrado.net/$filename -outfile $filename
		
	}
	foreach ($dir in $list | where {$_.type -eq "dir"}){
		NtrDirDownload $dir.path
	}
	cd ..
}




#####################################
#start of personal scripts using API#
#####################################

$currArk = "C:\temp\ark-backup\currArk\TheIsland.ark"

Function UpdateCurr {
	NtrFileCopy "$sg/SavedArks/TheIsland.ark" "/games/$ntrusername/ftproot/"
	wget ftp://$ntrusername`:$ftppassword@$ntrhostname/TheIsland.ark -outfile $currArk

	#Fake save version 9
	$offset = 0
	$bytes = [System.IO.File]::ReadAllBytes($currArk)
	$bytes[$offset] = 0x9
	[System.IO.File]::WriteAllBytes($currArk, $bytes)
}

Function UpdateAll {
	c:
	md \temp | out-null
	md \temp\ark-backup | out-null
	cd \temp\ark-backup | out-null
	$stamp = $(get-date -f yyyy-MM-dd_HH_mm_ss)
	md "Ark-Backup-$stamp" | out-null
	cd "Ark-Backup-$stamp" | out-null
	md Config | out-null


	NtrDirDownload "$sg/SavedArks/"
	NtrDirDownload "$sg/Logs/"

	cd Config
	NtrDirDownload "$sg/Config/WindowsServer/"
	cd ..
	cd ..
}

#########################
#start of .ark functions#
#########################

$currArk = "C:\temp\ark-backup\currArk\TheIsland.ark"

$RInt16 = {
	[System.BitConverter]::ToInt16($arkfile.file.ReadBytes(2), 0)
}
$RInt32 = {   
	[System.BitConverter]::ToInt32($arkfile.file.ReadBytes(4), 0)
}
$RSingle = {
	[System.BitConverter]::ToSingle($arkfile.file.ReadBytes(4), 0)
}
$RString = {   
	Param (
		$length
    )
	
	[System.Text.Encoding]::ASCII.GetString($arkfile.file.ReadBytes($length), 0)
}
$LoadArk = {
	Param (
		 [Parameter(Mandatory=$false)]$ArkPath
	)
	
	if (!($ArkPath)){
		$ArkPath = $arkfile.ArkPath
	}
	
	$arkfile.File = New-Object System.IO.BinaryReader([System.IO.File]::Open($ArkPath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite))
	$arkfile.File.BaseStream.Position = 0
}
$Ver = {
	$arkfile.file.BaseStream.Position = 0
	$arkfile.RInt16()
}
$Playtime = {
	$arkfile.file.BaseStream.Position = 0x12
	$arkfile.RSingle()
}


$arkfile = New-Object -TypeName PSObject
Add-Member -InputObject $arkfile -MemberType NoteProperty -Name ArkPath -Value $currArk
Add-Member -InputObject $arkfile -MemberType NoteProperty -Name File -Value $null

Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name RInt16 -Value $RInt16
Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name RInt32 -Value $RInt32
Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name RSingle -Value $RSingle
Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name RString -Value $RString

Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name LoadArk -Value $LoadArk
Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name Ver -Value $Ver
Add-Member -InputObject $arkfile -MemberType ScriptMethod -Name Playtime -Value $Playtime

$arkfile.LoadArk()




